// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.calcFileSizeStmt, err = db.PrepareContext(ctx, calcFileSize); err != nil {
		return nil, fmt.Errorf("error preparing query CalcFileSize: %w", err)
	}
	if q.deleteHeadStmt, err = db.PrepareContext(ctx, deleteHead); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHead: %w", err)
	}
	if q.getAllFilesStmt, err = db.PrepareContext(ctx, getAllFiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllFiles: %w", err)
	}
	if q.getAllHeadsStmt, err = db.PrepareContext(ctx, getAllHeads); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllHeads: %w", err)
	}
	if q.getFileIDByNameStmt, err = db.PrepareContext(ctx, getFileIDByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileIDByName: %w", err)
	}
	if q.getFileVersionsStmt, err = db.PrepareContext(ctx, getFileVersions); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileVersions: %w", err)
	}
	if q.getHeadVersionStmt, err = db.PrepareContext(ctx, getHeadVersion); err != nil {
		return nil, fmt.Errorf("error preparing query GetHeadVersion: %w", err)
	}
	if q.getLayerByVersionStmt, err = db.PrepareContext(ctx, getLayerByVersion); err != nil {
		return nil, fmt.Errorf("error preparing query GetLayerByVersion: %w", err)
	}
	if q.getLayerChunksStmt, err = db.PrepareContext(ctx, getLayerChunks); err != nil {
		return nil, fmt.Errorf("error preparing query GetLayerChunks: %w", err)
	}
	if q.getLayersByFileIDStmt, err = db.PrepareContext(ctx, getLayersByFileID); err != nil {
		return nil, fmt.Errorf("error preparing query GetLayersByFileID: %w", err)
	}
	if q.getObjectKeyStmt, err = db.PrepareContext(ctx, getObjectKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetObjectKey: %w", err)
	}
	if q.getOverlappingChunksWithVersionStmt, err = db.PrepareContext(ctx, getOverlappingChunksWithVersion); err != nil {
		return nil, fmt.Errorf("error preparing query GetOverlappingChunksWithVersion: %w", err)
	}
	if q.getVersionIDByTagStmt, err = db.PrepareContext(ctx, getVersionIDByTag); err != nil {
		return nil, fmt.Errorf("error preparing query GetVersionIDByTag: %w", err)
	}
	if q.insertChunkStmt, err = db.PrepareContext(ctx, insertChunk); err != nil {
		return nil, fmt.Errorf("error preparing query InsertChunk: %w", err)
	}
	if q.insertFileStmt, err = db.PrepareContext(ctx, insertFile); err != nil {
		return nil, fmt.Errorf("error preparing query InsertFile: %w", err)
	}
	if q.insertLayerStmt, err = db.PrepareContext(ctx, insertLayer); err != nil {
		return nil, fmt.Errorf("error preparing query InsertLayer: %w", err)
	}
	if q.insertVersionStmt, err = db.PrepareContext(ctx, insertVersion); err != nil {
		return nil, fmt.Errorf("error preparing query InsertVersion: %w", err)
	}
	if q.setHeadStmt, err = db.PrepareContext(ctx, setHead); err != nil {
		return nil, fmt.Errorf("error preparing query SetHead: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.calcFileSizeStmt != nil {
		if cerr := q.calcFileSizeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing calcFileSizeStmt: %w", cerr)
		}
	}
	if q.deleteHeadStmt != nil {
		if cerr := q.deleteHeadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHeadStmt: %w", cerr)
		}
	}
	if q.getAllFilesStmt != nil {
		if cerr := q.getAllFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllFilesStmt: %w", cerr)
		}
	}
	if q.getAllHeadsStmt != nil {
		if cerr := q.getAllHeadsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllHeadsStmt: %w", cerr)
		}
	}
	if q.getFileIDByNameStmt != nil {
		if cerr := q.getFileIDByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileIDByNameStmt: %w", cerr)
		}
	}
	if q.getFileVersionsStmt != nil {
		if cerr := q.getFileVersionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileVersionsStmt: %w", cerr)
		}
	}
	if q.getHeadVersionStmt != nil {
		if cerr := q.getHeadVersionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHeadVersionStmt: %w", cerr)
		}
	}
	if q.getLayerByVersionStmt != nil {
		if cerr := q.getLayerByVersionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLayerByVersionStmt: %w", cerr)
		}
	}
	if q.getLayerChunksStmt != nil {
		if cerr := q.getLayerChunksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLayerChunksStmt: %w", cerr)
		}
	}
	if q.getLayersByFileIDStmt != nil {
		if cerr := q.getLayersByFileIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLayersByFileIDStmt: %w", cerr)
		}
	}
	if q.getObjectKeyStmt != nil {
		if cerr := q.getObjectKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObjectKeyStmt: %w", cerr)
		}
	}
	if q.getOverlappingChunksWithVersionStmt != nil {
		if cerr := q.getOverlappingChunksWithVersionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOverlappingChunksWithVersionStmt: %w", cerr)
		}
	}
	if q.getVersionIDByTagStmt != nil {
		if cerr := q.getVersionIDByTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVersionIDByTagStmt: %w", cerr)
		}
	}
	if q.insertChunkStmt != nil {
		if cerr := q.insertChunkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertChunkStmt: %w", cerr)
		}
	}
	if q.insertFileStmt != nil {
		if cerr := q.insertFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertFileStmt: %w", cerr)
		}
	}
	if q.insertLayerStmt != nil {
		if cerr := q.insertLayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertLayerStmt: %w", cerr)
		}
	}
	if q.insertVersionStmt != nil {
		if cerr := q.insertVersionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertVersionStmt: %w", cerr)
		}
	}
	if q.setHeadStmt != nil {
		if cerr := q.setHeadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setHeadStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	calcFileSizeStmt                    *sql.Stmt
	deleteHeadStmt                      *sql.Stmt
	getAllFilesStmt                     *sql.Stmt
	getAllHeadsStmt                     *sql.Stmt
	getFileIDByNameStmt                 *sql.Stmt
	getFileVersionsStmt                 *sql.Stmt
	getHeadVersionStmt                  *sql.Stmt
	getLayerByVersionStmt               *sql.Stmt
	getLayerChunksStmt                  *sql.Stmt
	getLayersByFileIDStmt               *sql.Stmt
	getObjectKeyStmt                    *sql.Stmt
	getOverlappingChunksWithVersionStmt *sql.Stmt
	getVersionIDByTagStmt               *sql.Stmt
	insertChunkStmt                     *sql.Stmt
	insertFileStmt                      *sql.Stmt
	insertLayerStmt                     *sql.Stmt
	insertVersionStmt                   *sql.Stmt
	setHeadStmt                         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		calcFileSizeStmt:                    q.calcFileSizeStmt,
		deleteHeadStmt:                      q.deleteHeadStmt,
		getAllFilesStmt:                     q.getAllFilesStmt,
		getAllHeadsStmt:                     q.getAllHeadsStmt,
		getFileIDByNameStmt:                 q.getFileIDByNameStmt,
		getFileVersionsStmt:                 q.getFileVersionsStmt,
		getHeadVersionStmt:                  q.getHeadVersionStmt,
		getLayerByVersionStmt:               q.getLayerByVersionStmt,
		getLayerChunksStmt:                  q.getLayerChunksStmt,
		getLayersByFileIDStmt:               q.getLayersByFileIDStmt,
		getObjectKeyStmt:                    q.getObjectKeyStmt,
		getOverlappingChunksWithVersionStmt: q.getOverlappingChunksWithVersionStmt,
		getVersionIDByTagStmt:               q.getVersionIDByTagStmt,
		insertChunkStmt:                     q.insertChunkStmt,
		insertFileStmt:                      q.insertFileStmt,
		insertLayerStmt:                     q.insertLayerStmt,
		insertVersionStmt:                   q.insertVersionStmt,
		setHeadStmt:                         q.setHeadStmt,
	}
}
