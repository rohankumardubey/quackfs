// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: heads.sql

package sqlc

import (
	"context"
)

const deleteHead = `-- name: DeleteHead :exec
DELETE FROM heads
WHERE file_id = $1
`

func (q *Queries) DeleteHead(ctx context.Context, fileID uint64) error {
	_, err := q.exec(ctx, q.deleteHeadStmt, deleteHead, fileID)
	return err
}

const getAllHeads = `-- name: GetAllHeads :many
SELECT h.file_id, f.name as file_name, v.id as version_id, v.tag as version_tag
FROM heads h
JOIN files f ON h.file_id = f.id
JOIN versions v ON h.version_id = v.id
`

type GetAllHeadsRow struct {
	FileID     uint64 `json:"fileId"`
	FileName   string `json:"fileName"`
	VersionID  uint64 `json:"versionId"`
	VersionTag string `json:"versionTag"`
}

func (q *Queries) GetAllHeads(ctx context.Context) ([]GetAllHeadsRow, error) {
	rows, err := q.query(ctx, q.getAllHeadsStmt, getAllHeads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllHeadsRow{}
	for rows.Next() {
		var i GetAllHeadsRow
		if err := rows.Scan(
			&i.FileID,
			&i.FileName,
			&i.VersionID,
			&i.VersionTag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHeadVersion = `-- name: GetHeadVersion :one
SELECT v.id as version_id, v.tag as version_tag
FROM heads h
JOIN versions v ON h.version_id = v.id
WHERE h.file_id = $1
`

type GetHeadVersionRow struct {
	VersionID  uint64 `json:"versionId"`
	VersionTag string `json:"versionTag"`
}

func (q *Queries) GetHeadVersion(ctx context.Context, fileID uint64) (GetHeadVersionRow, error) {
	row := q.queryRow(ctx, q.getHeadVersionStmt, getHeadVersion, fileID)
	var i GetHeadVersionRow
	err := row.Scan(&i.VersionID, &i.VersionTag)
	return i, err
}

const setHead = `-- name: SetHead :exec
INSERT INTO heads (file_id, version_id)
VALUES ($1, $2)
ON CONFLICT (file_id)
DO UPDATE SET version_id = $2, created_at = CURRENT_TIMESTAMP
`

type SetHeadParams struct {
	FileID    uint64 `json:"fileId"`
	VersionID uint64 `json:"versionId"`
}

func (q *Queries) SetHead(ctx context.Context, arg SetHeadParams) error {
	_, err := q.exec(ctx, q.setHeadStmt, setHead, arg.FileID, arg.VersionID)
	return err
}
